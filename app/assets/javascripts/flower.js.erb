var test;

function rendering() {
    
    var width = 960,
    height = 500;
    // var color = d3.scale.category20();
    var lengthmultiplier = 400;
    var side = 20;
    
    var svg = d3.select("body")
	.append("div").attr("class", "row")
	.append("svg").attr("width",width).attr("height",height);
    
    var force = d3.layout.force()
	.charge(-120)
	.gravity(0.1)
	.linkDistance(function(d){ return (1 - d.value)*lengthmultiplier;})
	.size([width,height])

    force
	.nodes(jsondata.nodes)
	.links(jsondata.links)
	.start();
    
    var link = svg.selectAll(".link")
	.data(jsondata.links)
	.enter().append("line")
	.attr("class", "link")
	.style("stroke-width", function(d) { return 4; })
	.style("stroke",function(d){return "black"});
    
    var node = svg.selectAll(".node")
	.data(jsondata.nodes)
	.enter().append("rect")
	.style("stroke-width",1)
	.attr("class", function(d) { return (d.PMID == jsondata.nodes[0].PMID) ? "node query" : "node related"})
	.attr("width", side).attr("height", side).attr("rx", side).attr("ry", side)
	.attr("id",function(d){return (d.PMID == jsondata.nodes[0].PMID) ? ("query_"+d.PMID) : ("related_"+d.PMID);})
	.call(force.drag)
	.on("dblclick", function(){
	    if (d3.select(this).attr("width") == side) {
		d3.select(this).transition().attr("width", side * 10).attr("height", side * 5).style("fill", "white").style("stroke", "black").style("stroke-width", "3")
	    } else {
		var type = d3.select(this).attr("class")

		if (type == "node query") {
		    d3.select(this).transition().attr("width", side).attr("height", side).style("fill", "#00ACF6").style("stroke", "");
		} else {
		    d3.select(this).transition().attr("width", side).attr("height", side).style("fill", "#00F864").style("stroke", "");
		}
	    }
	});


    
    node.append("title")
	.text(function(d) { return d.PMID; });
    
    force.on("tick", function() {
	link.attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });
	
	node.attr("x", function(d) { return d.x - (side/2); })
            .attr("y", function(d) { return d.y - (side/2); });
    });
}

