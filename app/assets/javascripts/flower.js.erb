var test;

function rendering() {
  
  var width = 960,
  height = 500;
  var color = d3.scale.category20();
  var lengthmultiplier = 400;
  
  var svg = d3.select("body").append("svg")
	      .attr("width",width)
	      .attr("height",height);
  
  var force = d3.layout.force()
		       .charge(-120)
		       .gravity(0.1)
		       .linkDistance(function(d){ return (1 - d.value)*lengthmultiplier;})
		       .size([width,height])

  force
		       .nodes(jsondata.nodes)
		       .links(jsondata.links)
		       .start();
  
  var link = svg.selectAll(".link")
		.data(jsondata.links)
		  .enter().append("line")
		  .attr("class", "link")
		  .style("stroke-width", function(d) { return 4; })
		  .style("stroke",function(d){return "black"});
  
  var node = svg.selectAll(".node")
		.data(jsondata.nodes)
	 .enter().append("circle")
	 .style("stroke-width",1)
	 .attr("class", function(d) { return (d.PMID == jsondata.nodes[0].PMID) ? "node query" : "node related"})
	 .attr("r", 10)
	 .attr("id",function(d){return (d.PMID == jsondata.nodes[0].PMID) ? ("query_"+d.PMID) : ("related_"+d.PMID);})
	 .call(force.drag);
  node.append("title")
      .text(function(d) { return d.PMID; });
  
  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
    
    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  });
}

